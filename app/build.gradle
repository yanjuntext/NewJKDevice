plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'maven-publish'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
//        applicationId "com.tutk.IOTC"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 3
        versionName "1.0.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi','armeabi-v7a', 'arm64-v8a'
        }

    }

    buildTypes {
        release {
            minifyEnabled false
//            consumerProguardFiles('proguard-rules.pro')
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main {
//            manifest.srcFuke 'AndroidManifest.xml'
//            java.srcDirs = ['src']
//            resources.srcDirs = ['src']
//            aidl.srcDirs =['src/aidl']
//            renderscript.srcDirs = ['src']
//            res.srcDirs = ['res']
//            assets.srcDirs = ['assets']
            jni.srcDirs = ['src/jni']
            jniLibs.srcDirs 'src/jni/jniLibs'

//            proto{
//                srcDir 'src/proto'
//                include '**/*.proto'
//            }
        }
    }

    afterEvaluate {
        publishing {
            def versionName = "1.0.14" // 当前版本依赖库版本号，这个jitpack不会使用到，只是我们开发者自己查看
            publications {
                // Creates a Maven publication called "release".
                release(MavenPublication) {
                    from components.release
                    //建议和github地址对应，否则对jitpack无效
                    groupId = 'com.github.yanjuntext'
                    //建议和github仓库名称对应，否则对jitpack无效
                    artifactId = 'jkdevice'
                    //建议和release的tag相同，否则对jitpack无效
                    version = versionName
                }
            }
            repositories {
                // 下面这部分，不是很清楚加不加，但是最后加上
                maven {
                    // change URLs to point to your repos, e.g. http://my.org/repo
                    def baseUrl = buildDir.getParent()
                    def releasesRepoUrl = "$baseUrl/repos/releases"
                    def snapshotsRepoUrl = "$baseUrl/repos/snapshots"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    //协程
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0"

//    implementation 'org.webrtc:google-webrtc:1.0.32006'

//    testImplementation 'junit:junit:4.13.2'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
task generateSourcesJar(type: Jar) {
    if (project.hasProperty("kotlin")) {
        from android.sourceSets.main.java.getSrcDirs()
    } else if (project.hasProperty("android")) {
        println '===> project java'
        from android.sourceSets.main.jave.sourceFiles
    } else {
        println '===> project java & kotlin'
        from sourceSets.main.allSource
    }
    classifier = 'sources'
}

// 源代码一起打包
task androidSourcesJar(type: Jar) {
    if (project.hasProperty("kotlin")) {
        from android.sourceSets.main.java.getSrcDirs()
    } else if (project.hasProperty("android")) {
        println '===> project java'
        from android.sourceSets.main.jave.sourceFiles
    } else {
        println '===> project java & kotlin'
        from sourceSets.main.allSource
    }
    classifier = 'sources'
//    from android.sourceSets.main.java.sourceFiles
}
artifacts {
    archives androidSourcesJar
}
//task sourcesJar(type: Jar) {
//    if (project.hasProperty("kotlin")) {
//        from android.sourceSets.main.java.getSrcDirs()
//    } else if (project.hasProperty("android")) {
//        from android.sourceSets.main.java.sourceFiles
//    } else {
//        println project
//        from sourceSets.main.allSource
//    }
//    classifier = 'sources'
//}
