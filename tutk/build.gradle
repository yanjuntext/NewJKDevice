plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'maven-publish'
}

android {
    compileSdkVersion 33


    defaultConfig {
//        applicationId "com.tutk.IOTC"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 22
        versionName "2.1.19"
        //2304 * 1296
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }

    }

    buildTypes {
        release {
            minifyEnabled false
//            consumerProguardFiles('proguard-rules.pro')
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main {
//            jni.srcDirs = ['libs']
            jniLibs.srcDirs 'libs'
//            jni.srcDirs = ['src/main/jniLibs']
        }
    }
    publishing {
        singleVariant("release")
    }

//    libraryVariants.all{variant->
//        variant.outputs.all{
//            if (it.name.contains("release")) {
//                def jniLibsDir = variant.getPackageLibraryProvider().get().jniFolders[0]
//                packagingOptions {
//                    // Pick the specific .so files you want to include or exclude if needed
//                    pickFirst("$jniLibsDir/arm64-v8a/libAVAPIs.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libgpac.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libIOTCAPIs.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libjson-c.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libLibyuvUtils.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libLocalRecorder.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libMediaConvert.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libnewvideodecoder.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libRDTAPIs.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libsCHL.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libSLCAec.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libTUTKGlobalAPIs.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libwebrtc_android.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libwebrtc_jni.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libyuv.so")
//                    pickFirst("$jniLibsDir/arm64-v8a/libyuv2rgb.so")
//
//                    pickFirst("$jniLibsDir/armeabi-v7a/libAVAPIs.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libgpac.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libIOTCAPIs.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libjson-c.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libLibyuvUtils.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libLocalRecorder.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libMediaConvert.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libnewvideodecoder.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libRDTAPIs.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libsCHL.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libSLCAec.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libTUTKGlobalAPIs.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libwebrtc_android.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libwebrtc_jni.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libyuv.so")
//                    pickFirst("$jniLibsDir/armeabi-v7a/libyuv2rgb.so")
//
//                    pickFirst("$jniLibsDir/armeabi/libAVAPIs.so")
//                    pickFirst("$jniLibsDir/armeabi/libgpac.so")
//                    pickFirst("$jniLibsDir/armeabi/libIOTCAPIs.so")
//                    pickFirst("$jniLibsDir/armeabi/libjson-c.so")
//                    pickFirst("$jniLibsDir/armeabi/libLibyuvUtils.so")
//                    pickFirst("$jniLibsDir/armeabi/libLocalRecorder.so")
//                    pickFirst("$jniLibsDir/armeabi/libMediaConvert.so")
//                    pickFirst("$jniLibsDir/armeabi/libnewvideodecoder.so")
//                    pickFirst("$jniLibsDir/armeabi/libRDTAPIs.so")
//                    pickFirst("$jniLibsDir/armeabi/libsCHL.so")
//                    pickFirst("$jniLibsDir/armeabi/libSLCAec.so")
//                    pickFirst("$jniLibsDir/armeabi/libTUTKGlobalAPIs.so")
//                    pickFirst("$jniLibsDir/armeabi/libwebrtc_android.so")
//                    pickFirst("$jniLibsDir/armeabi/libwebrtc_jni.so")
//                    pickFirst("$jniLibsDir/armeabi/libyuv.so")
//                    pickFirst("$jniLibsDir/armeabi/libyuv2rgb.so")
//
//                }
//            }
//        }
//    }


}
afterEvaluate {
    publishing {
        def versionName = "2.1.27" // 当前版本依赖库版本号，这个jitpack不会使用到，只是我们开发者自己查看
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.release
                //建议和github地址对应，否则对jitpack无效
                groupId = 'com.github.yanjuntext'
//                    groupId = 'com.jk.device'
                //建议和github仓库名称对应，否则对jitpack无效
                artifactId = 'NewJKDevice'
//                    artifactId = 'device'
                //建议和release的tag相同，否则对jitpack无效
                version = versionName
            }
        }
        repositories {
            // 下面这部分，不是很清楚加不加，但是最后加上
            maven {
                // change URLs to point to your repos, e.g. http://my.org/repo
                def baseUrl = buildDir.getParent()
                def releasesRepoUrl = "$baseUrl/repos/releases"
                def snapshotsRepoUrl = "$baseUrl/repos/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    //协程
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.3"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.0"
//    implementation 'androidx.core:core-ktx:1.6.0'
//    implementation 'androidx.appcompat:appcompat:1.3.1'
//    //协程
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0"
}
task generateSourcesJar(type: Jar) {
    if (project.hasProperty("kotlin")) {
        from android.sourceSets.main.java.getSrcDirs()
    } else if (project.hasProperty("android")) {
        println '===> project java'
        from android.sourceSets.main.jave.sourceFiles
    } else {
        println '===> project java & kotlin'
        from sourceSets.main.allSource
    }
    classifier = 'sources'
}

// 源代码一起打包
task androidSourcesJar(type: Jar) {
    if (project.hasProperty("kotlin")) {
        from android.sourceSets.main.java.getSrcDirs()
    } else if (project.hasProperty("android")) {
        println '===> project java'
        from android.sourceSets.main.jave.sourceFiles
    } else {
        println '===> project java & kotlin'
        from sourceSets.main.allSource
    }
    classifier = 'sources'
//    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}




//task sourcesJar(type: Jar) {
//    if (project.hasProperty("kotlin")) {
//        from android.sourceSets.main.java.getSrcDirs()
//    } else if (project.hasProperty("android")) {
//        from android.sourceSets.main.java.sourceFiles
//    } else {
//        println project
//        from sourceSets.main.allSource
//    }
//    classifier = 'sources'
//}
